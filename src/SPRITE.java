import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public enum SPRITE {
    DEBUG_RED(1,1,null, null),

    GRASS(0, 0, SPRITEGROUP.GRASS, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS }),

    BEACH(1,0,SPRITEGROUP.BEACH, new SPRITEGROUP[] {SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH , SPRITEGROUP.BEACH}),
    BEACH_INNER_0(3, 0, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH }),
    BEACH_INNER_1(4, 0, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH }),
    BEACH_INNER_2(5, 0, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS }),
    BEACH_INNER_3(3, 1, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH }),
    BEACH_INNER_4(5, 1, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS }),
    BEACH_INNER_5(3, 2, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS }),
    BEACH_INNER_6(4, 2, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS }),
    BEACH_INNER_7(5, 2, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS, SPRITEGROUP.GRASS }),
    BEACH_OUTER_0(6,0, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS}),
    BEACH_OUTER_1(8,0, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH}),
    BEACH_OUTER_2(6,2, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH}),
    BEACH_OUTER_3(8,2, SPRITEGROUP.BEACH, new SPRITEGROUP[] { SPRITEGROUP.GRASS, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH}),

    SHALLOW(2,0,SPRITEGROUP.SHALLOW, new SPRITEGROUP[] {SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW , SPRITEGROUP.SHALLOW}),
    SHALLOW_INNER_0(3, 3, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW }),
    SHALLOW_INNER_1(4, 3, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW }),
    SHALLOW_INNER_2(5, 3, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH }),
    SHALLOW_INNER_3(3, 4, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW }),
    SHALLOW_INNER_4(5, 4, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH }),
    SHALLOW_INNER_5(3, 5, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH }),
    SHALLOW_INNER_6(4, 5, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH }),
    SHALLOW_INNER_7(5, 5, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH, SPRITEGROUP.BEACH }),
    SHALLOW_OUTER_0(6,3, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH}),
    SHALLOW_OUTER_1(8,3, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW}),
    SHALLOW_OUTER_2(6,5, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.SHALLOW, SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW}),
    SHALLOW_OUTER_3(8,5, SPRITEGROUP.SHALLOW, new SPRITEGROUP[] { SPRITEGROUP.BEACH, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW, SPRITEGROUP.SHALLOW})
    ;

    public final int i;
    public final SPRITEGROUP g;
    public final SPRITEGROUP[] corners;

    SPRITE(int x, int y, SPRITEGROUP g, SPRITEGROUP[] corners) {
        this.i = y*12+x;
        this.g = g;
        this.corners = corners;
    }

    public static SPRITE fromGroup(Random rand, SPRITEGROUP g) {
        SPRITE[] sprites = Arrays.stream(values()).filter(x -> x.g == g).toArray(SPRITE[]::new);
        return sprites[rand.nextInt(sprites.length)];
    }

    public static SPRITE fromEdges(SPRITEGROUP[] corners, Random rand) {
        ArrayList<SPRITE> possibilities = new ArrayList<SPRITE>();
        for (SPRITE s : values()) {
            if (s.corners == null) continue;

            boolean found = true;
            for (int i = 0; i < s.corners.length; i++) {
                if (s.corners[i] != corners[i]) {
                    found = false;
                    break;
                }
            }

            if (found) {
                possibilities.add(s);
            }
        }
        if (possibilities.isEmpty()) return DEBUG_RED;

        return possibilities.get(rand.nextInt(possibilities.size()));
    }

    public SPRITEGROUP getGroup() {
        return g;
    }
}
